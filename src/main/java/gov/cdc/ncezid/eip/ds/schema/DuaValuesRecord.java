/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.cdc.ncezid.eip.ds.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DuaValuesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5137908405931461182L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DuaValuesRecord\",\"namespace\":\"gov.cdc.ncezid.eip.ds.schema\",\"fields\":[{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"catchmentStatus\",\"type\":[\"null\",\"boolean\"],\"default\":false},{\"name\":\"condition\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"conditionStatus\",\"type\":[\"null\",\"boolean\"],\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DuaValuesRecord> ENCODER =
      new BinaryMessageEncoder<DuaValuesRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DuaValuesRecord> DECODER =
      new BinaryMessageDecoder<DuaValuesRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DuaValuesRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DuaValuesRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DuaValuesRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DuaValuesRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DuaValuesRecord from a ByteBuffer. */
  public static DuaValuesRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence county;
  @Deprecated public java.lang.Boolean catchmentStatus;
  @Deprecated public java.lang.CharSequence condition;
  @Deprecated public java.lang.Boolean conditionStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DuaValuesRecord() {}

  /**
   * All-args constructor.
   * @param state The new value for state
   * @param county The new value for county
   * @param catchmentStatus The new value for catchmentStatus
   * @param condition The new value for condition
   * @param conditionStatus The new value for conditionStatus
   */
  public DuaValuesRecord(java.lang.CharSequence state, java.lang.CharSequence county, java.lang.Boolean catchmentStatus, java.lang.CharSequence condition, java.lang.Boolean conditionStatus) {
    this.state = state;
    this.county = county;
    this.catchmentStatus = catchmentStatus;
    this.condition = condition;
    this.conditionStatus = conditionStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return state;
    case 1: return county;
    case 2: return catchmentStatus;
    case 3: return condition;
    case 4: return conditionStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: state = (java.lang.CharSequence)value$; break;
    case 1: county = (java.lang.CharSequence)value$; break;
    case 2: catchmentStatus = (java.lang.Boolean)value$; break;
    case 3: condition = (java.lang.CharSequence)value$; break;
    case 4: conditionStatus = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'county' field.
   * @return The value of the 'county' field.
   */
  public java.lang.CharSequence getCounty() {
    return county;
  }

  /**
   * Sets the value of the 'county' field.
   * @param value the value to set.
   */
  public void setCounty(java.lang.CharSequence value) {
    this.county = value;
  }

  /**
   * Gets the value of the 'catchmentStatus' field.
   * @return The value of the 'catchmentStatus' field.
   */
  public java.lang.Boolean getCatchmentStatus() {
    return catchmentStatus;
  }

  /**
   * Sets the value of the 'catchmentStatus' field.
   * @param value the value to set.
   */
  public void setCatchmentStatus(java.lang.Boolean value) {
    this.catchmentStatus = value;
  }

  /**
   * Gets the value of the 'condition' field.
   * @return The value of the 'condition' field.
   */
  public java.lang.CharSequence getCondition() {
    return condition;
  }

  /**
   * Sets the value of the 'condition' field.
   * @param value the value to set.
   */
  public void setCondition(java.lang.CharSequence value) {
    this.condition = value;
  }

  /**
   * Gets the value of the 'conditionStatus' field.
   * @return The value of the 'conditionStatus' field.
   */
  public java.lang.Boolean getConditionStatus() {
    return conditionStatus;
  }

  /**
   * Sets the value of the 'conditionStatus' field.
   * @param value the value to set.
   */
  public void setConditionStatus(java.lang.Boolean value) {
    this.conditionStatus = value;
  }

  /**
   * Creates a new DuaValuesRecord RecordBuilder.
   * @return A new DuaValuesRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder newBuilder() {
    return new gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder();
  }

  /**
   * Creates a new DuaValuesRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DuaValuesRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder newBuilder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder other) {
    return new gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder(other);
  }

  /**
   * Creates a new DuaValuesRecord RecordBuilder by copying an existing DuaValuesRecord instance.
   * @param other The existing instance to copy.
   * @return A new DuaValuesRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder newBuilder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord other) {
    return new gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder(other);
  }

  /**
   * RecordBuilder for DuaValuesRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DuaValuesRecord>
    implements org.apache.avro.data.RecordBuilder<DuaValuesRecord> {

    private java.lang.CharSequence state;
    private java.lang.CharSequence county;
    private java.lang.Boolean catchmentStatus;
    private java.lang.CharSequence condition;
    private java.lang.Boolean conditionStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.county)) {
        this.county = data().deepCopy(fields()[1].schema(), other.county);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.catchmentStatus)) {
        this.catchmentStatus = data().deepCopy(fields()[2].schema(), other.catchmentStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.condition)) {
        this.condition = data().deepCopy(fields()[3].schema(), other.condition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.conditionStatus)) {
        this.conditionStatus = data().deepCopy(fields()[4].schema(), other.conditionStatus);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DuaValuesRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.county)) {
        this.county = data().deepCopy(fields()[1].schema(), other.county);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.catchmentStatus)) {
        this.catchmentStatus = data().deepCopy(fields()[2].schema(), other.catchmentStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.condition)) {
        this.condition = data().deepCopy(fields()[3].schema(), other.condition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.conditionStatus)) {
        this.conditionStatus = data().deepCopy(fields()[4].schema(), other.conditionStatus);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder setState(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.state = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder clearState() {
      state = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'county' field.
      * @return The value.
      */
    public java.lang.CharSequence getCounty() {
      return county;
    }

    /**
      * Sets the value of the 'county' field.
      * @param value The value of 'county'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder setCounty(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.county = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'county' field has been set.
      * @return True if the 'county' field has been set, false otherwise.
      */
    public boolean hasCounty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'county' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder clearCounty() {
      county = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'catchmentStatus' field.
      * @return The value.
      */
    public java.lang.Boolean getCatchmentStatus() {
      return catchmentStatus;
    }

    /**
      * Sets the value of the 'catchmentStatus' field.
      * @param value The value of 'catchmentStatus'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder setCatchmentStatus(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.catchmentStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'catchmentStatus' field has been set.
      * @return True if the 'catchmentStatus' field has been set, false otherwise.
      */
    public boolean hasCatchmentStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'catchmentStatus' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder clearCatchmentStatus() {
      catchmentStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'condition' field.
      * @return The value.
      */
    public java.lang.CharSequence getCondition() {
      return condition;
    }

    /**
      * Sets the value of the 'condition' field.
      * @param value The value of 'condition'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder setCondition(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.condition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'condition' field has been set.
      * @return True if the 'condition' field has been set, false otherwise.
      */
    public boolean hasCondition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'condition' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder clearCondition() {
      condition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'conditionStatus' field.
      * @return The value.
      */
    public java.lang.Boolean getConditionStatus() {
      return conditionStatus;
    }

    /**
      * Sets the value of the 'conditionStatus' field.
      * @param value The value of 'conditionStatus'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder setConditionStatus(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.conditionStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'conditionStatus' field has been set.
      * @return True if the 'conditionStatus' field has been set, false otherwise.
      */
    public boolean hasConditionStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'conditionStatus' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder clearConditionStatus() {
      conditionStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DuaValuesRecord build() {
      try {
        DuaValuesRecord record = new DuaValuesRecord();
        record.state = fieldSetFlags()[0] ? this.state : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.county = fieldSetFlags()[1] ? this.county : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.catchmentStatus = fieldSetFlags()[2] ? this.catchmentStatus : (java.lang.Boolean) defaultValue(fields()[2]);
        record.condition = fieldSetFlags()[3] ? this.condition : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.conditionStatus = fieldSetFlags()[4] ? this.conditionStatus : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DuaValuesRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DuaValuesRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DuaValuesRecord>
    READER$ = (org.apache.avro.io.DatumReader<DuaValuesRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
