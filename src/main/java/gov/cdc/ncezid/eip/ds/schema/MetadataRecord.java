/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.cdc.ncezid.eip.ds.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MetadataRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6383670392332025841L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MetadataRecord\",\"namespace\":\"gov.cdc.ncezid.eip.ds.schema\",\"fields\":[{\"name\":\"recordGUID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pipeline\",\"type\":[\"null\",\"string\"],\"default\":\"EIP.FDD\"},{\"name\":\"duaValid\",\"type\":[\"null\",\"string\"],\"default\":false},{\"name\":\"duaProcessedTime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"duaValues\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DuaValuesRecord\",\"fields\":[{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"catchmentStatus\",\"type\":[\"null\",\"boolean\"],\"default\":false},{\"name\":\"condition\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"conditionStatus\",\"type\":[\"null\",\"boolean\"],\"default\":false}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MetadataRecord> ENCODER =
      new BinaryMessageEncoder<MetadataRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MetadataRecord> DECODER =
      new BinaryMessageDecoder<MetadataRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MetadataRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MetadataRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MetadataRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MetadataRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MetadataRecord from a ByteBuffer. */
  public static MetadataRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence recordGUID;
  @Deprecated public java.lang.CharSequence pipeline;
  @Deprecated public java.lang.CharSequence duaValid;
  @Deprecated public java.lang.CharSequence duaProcessedTime;
  @Deprecated public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord duaValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MetadataRecord() {}

  /**
   * All-args constructor.
   * @param recordGUID The new value for recordGUID
   * @param pipeline The new value for pipeline
   * @param duaValid The new value for duaValid
   * @param duaProcessedTime The new value for duaProcessedTime
   * @param duaValues The new value for duaValues
   */
  public MetadataRecord(java.lang.CharSequence recordGUID, java.lang.CharSequence pipeline, java.lang.CharSequence duaValid, java.lang.CharSequence duaProcessedTime, gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord duaValues) {
    this.recordGUID = recordGUID;
    this.pipeline = pipeline;
    this.duaValid = duaValid;
    this.duaProcessedTime = duaProcessedTime;
    this.duaValues = duaValues;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return recordGUID;
    case 1: return pipeline;
    case 2: return duaValid;
    case 3: return duaProcessedTime;
    case 4: return duaValues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: recordGUID = (java.lang.CharSequence)value$; break;
    case 1: pipeline = (java.lang.CharSequence)value$; break;
    case 2: duaValid = (java.lang.CharSequence)value$; break;
    case 3: duaProcessedTime = (java.lang.CharSequence)value$; break;
    case 4: duaValues = (gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'recordGUID' field.
   * @return The value of the 'recordGUID' field.
   */
  public java.lang.CharSequence getRecordGUID() {
    return recordGUID;
  }

  /**
   * Sets the value of the 'recordGUID' field.
   * @param value the value to set.
   */
  public void setRecordGUID(java.lang.CharSequence value) {
    this.recordGUID = value;
  }

  /**
   * Gets the value of the 'pipeline' field.
   * @return The value of the 'pipeline' field.
   */
  public java.lang.CharSequence getPipeline() {
    return pipeline;
  }

  /**
   * Sets the value of the 'pipeline' field.
   * @param value the value to set.
   */
  public void setPipeline(java.lang.CharSequence value) {
    this.pipeline = value;
  }

  /**
   * Gets the value of the 'duaValid' field.
   * @return The value of the 'duaValid' field.
   */
  public java.lang.CharSequence getDuaValid() {
    return duaValid;
  }

  /**
   * Sets the value of the 'duaValid' field.
   * @param value the value to set.
   */
  public void setDuaValid(java.lang.CharSequence value) {
    this.duaValid = value;
  }

  /**
   * Gets the value of the 'duaProcessedTime' field.
   * @return The value of the 'duaProcessedTime' field.
   */
  public java.lang.CharSequence getDuaProcessedTime() {
    return duaProcessedTime;
  }

  /**
   * Sets the value of the 'duaProcessedTime' field.
   * @param value the value to set.
   */
  public void setDuaProcessedTime(java.lang.CharSequence value) {
    this.duaProcessedTime = value;
  }

  /**
   * Gets the value of the 'duaValues' field.
   * @return The value of the 'duaValues' field.
   */
  public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord getDuaValues() {
    return duaValues;
  }

  /**
   * Sets the value of the 'duaValues' field.
   * @param value the value to set.
   */
  public void setDuaValues(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord value) {
    this.duaValues = value;
  }

  /**
   * Creates a new MetadataRecord RecordBuilder.
   * @return A new MetadataRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder newBuilder() {
    return new gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder();
  }

  /**
   * Creates a new MetadataRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MetadataRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder newBuilder(gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder other) {
    return new gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder(other);
  }

  /**
   * Creates a new MetadataRecord RecordBuilder by copying an existing MetadataRecord instance.
   * @param other The existing instance to copy.
   * @return A new MetadataRecord RecordBuilder
   */
  public static gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder newBuilder(gov.cdc.ncezid.eip.ds.schema.MetadataRecord other) {
    return new gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder(other);
  }

  /**
   * RecordBuilder for MetadataRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MetadataRecord>
    implements org.apache.avro.data.RecordBuilder<MetadataRecord> {

    private java.lang.CharSequence recordGUID;
    private java.lang.CharSequence pipeline;
    private java.lang.CharSequence duaValid;
    private java.lang.CharSequence duaProcessedTime;
    private gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord duaValues;
    private gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder duaValuesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.recordGUID)) {
        this.recordGUID = data().deepCopy(fields()[0].schema(), other.recordGUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pipeline)) {
        this.pipeline = data().deepCopy(fields()[1].schema(), other.pipeline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.duaValid)) {
        this.duaValid = data().deepCopy(fields()[2].schema(), other.duaValid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duaProcessedTime)) {
        this.duaProcessedTime = data().deepCopy(fields()[3].schema(), other.duaProcessedTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.duaValues)) {
        this.duaValues = data().deepCopy(fields()[4].schema(), other.duaValues);
        fieldSetFlags()[4] = true;
      }
      if (other.hasDuaValuesBuilder()) {
        this.duaValuesBuilder = gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.newBuilder(other.getDuaValuesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MetadataRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.cdc.ncezid.eip.ds.schema.MetadataRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.recordGUID)) {
        this.recordGUID = data().deepCopy(fields()[0].schema(), other.recordGUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pipeline)) {
        this.pipeline = data().deepCopy(fields()[1].schema(), other.pipeline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.duaValid)) {
        this.duaValid = data().deepCopy(fields()[2].schema(), other.duaValid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duaProcessedTime)) {
        this.duaProcessedTime = data().deepCopy(fields()[3].schema(), other.duaProcessedTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.duaValues)) {
        this.duaValues = data().deepCopy(fields()[4].schema(), other.duaValues);
        fieldSetFlags()[4] = true;
      }
      this.duaValuesBuilder = null;
    }

    /**
      * Gets the value of the 'recordGUID' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordGUID() {
      return recordGUID;
    }

    /**
      * Sets the value of the 'recordGUID' field.
      * @param value The value of 'recordGUID'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setRecordGUID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.recordGUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'recordGUID' field has been set.
      * @return True if the 'recordGUID' field has been set, false otherwise.
      */
    public boolean hasRecordGUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'recordGUID' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder clearRecordGUID() {
      recordGUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pipeline' field.
      * @return The value.
      */
    public java.lang.CharSequence getPipeline() {
      return pipeline;
    }

    /**
      * Sets the value of the 'pipeline' field.
      * @param value The value of 'pipeline'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setPipeline(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.pipeline = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pipeline' field has been set.
      * @return True if the 'pipeline' field has been set, false otherwise.
      */
    public boolean hasPipeline() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pipeline' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder clearPipeline() {
      pipeline = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'duaValid' field.
      * @return The value.
      */
    public java.lang.CharSequence getDuaValid() {
      return duaValid;
    }

    /**
      * Sets the value of the 'duaValid' field.
      * @param value The value of 'duaValid'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setDuaValid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.duaValid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'duaValid' field has been set.
      * @return True if the 'duaValid' field has been set, false otherwise.
      */
    public boolean hasDuaValid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'duaValid' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder clearDuaValid() {
      duaValid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'duaProcessedTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getDuaProcessedTime() {
      return duaProcessedTime;
    }

    /**
      * Sets the value of the 'duaProcessedTime' field.
      * @param value The value of 'duaProcessedTime'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setDuaProcessedTime(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.duaProcessedTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'duaProcessedTime' field has been set.
      * @return True if the 'duaProcessedTime' field has been set, false otherwise.
      */
    public boolean hasDuaProcessedTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'duaProcessedTime' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder clearDuaProcessedTime() {
      duaProcessedTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'duaValues' field.
      * @return The value.
      */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord getDuaValues() {
      return duaValues;
    }

    /**
      * Sets the value of the 'duaValues' field.
      * @param value The value of 'duaValues'.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setDuaValues(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord value) {
      validate(fields()[4], value);
      this.duaValuesBuilder = null;
      this.duaValues = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'duaValues' field has been set.
      * @return True if the 'duaValues' field has been set, false otherwise.
      */
    public boolean hasDuaValues() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'duaValues' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder getDuaValuesBuilder() {
      if (duaValuesBuilder == null) {
        if (hasDuaValues()) {
          setDuaValuesBuilder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.newBuilder(duaValues));
        } else {
          setDuaValuesBuilder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.newBuilder());
        }
      }
      return duaValuesBuilder;
    }

    /**
     * Sets the Builder instance for the 'duaValues' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder setDuaValuesBuilder(gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord.Builder value) {
      clearDuaValues();
      duaValuesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'duaValues' field has an active Builder instance
     * @return True if the 'duaValues' field has an active Builder instance
     */
    public boolean hasDuaValuesBuilder() {
      return duaValuesBuilder != null;
    }

    /**
      * Clears the value of the 'duaValues' field.
      * @return This builder.
      */
    public gov.cdc.ncezid.eip.ds.schema.MetadataRecord.Builder clearDuaValues() {
      duaValues = null;
      duaValuesBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MetadataRecord build() {
      try {
        MetadataRecord record = new MetadataRecord();
        record.recordGUID = fieldSetFlags()[0] ? this.recordGUID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.pipeline = fieldSetFlags()[1] ? this.pipeline : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.duaValid = fieldSetFlags()[2] ? this.duaValid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.duaProcessedTime = fieldSetFlags()[3] ? this.duaProcessedTime : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (duaValuesBuilder != null) {
          record.duaValues = this.duaValuesBuilder.build();
        } else {
          record.duaValues = fieldSetFlags()[4] ? this.duaValues : (gov.cdc.ncezid.eip.ds.schema.DuaValuesRecord) defaultValue(fields()[4]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MetadataRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MetadataRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MetadataRecord>
    READER$ = (org.apache.avro.io.DatumReader<MetadataRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
